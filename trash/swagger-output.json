{
  "swagger": "2.0",
  "info": {
    "title": "rest-sync-service-node-express-js",
    "description": "Description",
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/person": {
      "post": {
        "tags": [
          "Person Service"
        ],
        "summary": "create Person",
        "description": "Route to create a new person. It uses request validation middleware (createPersonValidation) to validate the request body. If there are validation errors, it logs them and returns a 422 status with the validation errors. Otherwise, it delegates the creation operation to the createPerson controller function.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "example": "any"
                },
                "surname": {
                  "example": "any"
                },
                "patronym": {
                  "example": "any"
                },
                "dateOfBirth": {
                  "example": "any"
                },
                "rnokpp": {
                  "example": "any"
                },
                "unzr": {
                  "example": "any"
                },
                "passportNumber": {
                  "example": "any"
                },
                "gender": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Person Service"
        ],
        "summary": "get Persons By Query Parameters",
        "description": "Route to get a list of persons by query parameters.Example ",
        "parameters": [
          {
            "name": "_page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "_limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "type": "string"
          },
          {
            "name": "surname",
            "in": "query",
            "type": "string"
          },
          {
            "name": "patronym",
            "in": "query",
            "type": "string"
          },
          {
            "name": "dateOfBirth",
            "in": "query",
            "type": "string"
          },
          {
            "name": "rnokpp",
            "in": "query",
            "type": "string"
          },
          {
            "name": "unzr",
            "in": "query",
            "type": "string"
          },
          {
            "name": "passportNumber",
            "in": "query",
            "type": "string"
          },
          {
            "name": "gender",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/person/{attribute}/{value}": {
      "get": {
        "tags": [
          "Person Service"
        ],
        "summary": "get Person By Unique Attribute",
        "description": "Route to get a person by unique attribute like unzr,rnokpp,passportNumber or id. Delegates the operation to the getPersonByUniqueAttribute controller function.",
        "parameters": [
          {
            "name": "attribute",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Person Service"
        ],
        "summary": "update Person By Unique Attribute",
        "description": "Route to update a person by unique attribute like unzr,rnokpp,passportNumber or id. It also uses request validation middleware (updatePersonValidation) to validate the request body. If there are validation errors, it logs them and returns a 422 status with the validation errors. Otherwise, it delegates the update operation to the updatePersonByUniqueAttribute controller function.",
        "parameters": [
          {
            "name": "attribute",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Person Service"
        ],
        "summary": "delete Person By Unique Attribute",
        "description": "Route to delete a person by unique attribute like unzr,rnokpp,passportNumber or id. Delegates the operation to the deletePersonByUniqueAttribute controller function.",
        "parameters": [
          {
            "name": "attribute",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  }
}
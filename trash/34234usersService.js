// usersService.js

const sqlite3 = require('sqlite3').verbose()
const User = require('./users')

// Connect to SQLite database
const db = new sqlite3.Database('mydb.sqlite')

// Function to create a new user
exports.createUser = (name, email, password) => {
	return new Promise((resolve, reject) => {
		db.run(
			'INSERT INTO users (name, email, password) VALUES (?, ?, ?)',
			[name, email, password],
			function (err) {
				if (err) {
					reject(err)
				} else {
					// Create a new User object with the ID generated by the database
					const newUser = new User(this.lastID, name, email, password)
					resolve(newUser)
				}
			}
		)
	})
}

// Function to retrieve a user by ID
exports.getUserById = id => {
	return new Promise((resolve, reject) => {
		db.get('SELECT * FROM users WHERE id = ?', [id], (err, row) => {
			if (err) {
				reject(err)
			} else if (!row) {
				resolve(null) // User not found
			} else {
				// Create a new User object using the data retrieved from the database
				const user = new User(row.id, row.name, row.email, row.password)
				resolve(user)
			}
		})
	})
}

// Function to retrieve all users
exports.getAllUsers = () => {
	return new Promise((resolve, reject) => {
		db.all('SELECT * FROM users', (err, rows) => {
			if (err) {
				reject(err)
			} else {
				// Map each row to a User object and return the array of users
				const users = rows.map(
					row => new User(row.id, row.name, row.email, row.password)
				)
				resolve(users)
			}
		})
	})
}

// Function to delete a user by ID
exports.deleteUserById = id => {
	return new Promise((resolve, reject) => {
		db.run('DELETE FROM users WHERE id = ?', [id], function (err) {
			if (err) {
				reject(err)
			} else {
				resolve({ rowsAffected: this.changes })
			}
		})
	})
}

// Close the database connection
exports.closeDatabase = () => {
	db.close()
}
